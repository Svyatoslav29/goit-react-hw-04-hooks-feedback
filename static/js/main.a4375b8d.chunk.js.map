{"version":3,"sources":["components/Feedback/feedback.module.css","components/Statistics/statistics.js","components/Container/container.js","components/Feedback/feedback.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","Statistics","good","neutral","bad","total","positivePercentage","defaultProps","Section","props","title","children","FeedbackOptions","options","onLeaveFeedback","className","style","item","map","el","type","name","onClick","list","App","useState","goodRate","setGoodRate","neutralRate","setNeutralRate","badRate","setBadRate","countTotalFeedback","event","target","prevState","totalRate","Math","round","countPositiveFeedbackPercentage","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6IACAA,EAAOC,QAAU,CAAC,KAAO,yB,gJCEzB,SAASC,EAAT,GAAwE,IAAlDC,EAAiD,EAAjDA,KAAMC,EAA2C,EAA3CA,QAASC,EAAkC,EAAlCA,IAAKC,EAA6B,EAA7BA,MAAOC,EAAsB,EAAtBA,mBAC/C,OACE,mCACGD,EAAQ,EACP,+BACE,6BACE,uCACQ,+BAAOH,SAGjB,6BACE,0CACW,+BAAOC,SAGpB,6BACE,sCACO,+BAAOC,SAGhB,wCACS,+BAAOC,OAEhB,oDACqB,iCAAOC,EAAP,cAIvB,0CAMRL,EAAWM,aAAe,CACxBL,KAAM,EACNC,QAAS,EACTC,IAAK,EACLC,MAAO,EACPC,mBAAoB,GAUPL,QClCEO,MAfjB,SAAiBC,GACb,IAAQC,EAAoBD,EAApBC,MAAOC,EAAaF,EAAbE,SACf,OACE,qCACE,6BAAKD,IACJC,M,gBCLM,SAASC,EAAT,GAAwD,IAA7BC,EAA4B,EAA5BA,QAASC,EAAmB,EAAnBA,gBACjD,OACI,oBAAIC,UAAWC,IAAMC,KAArB,SACGJ,EAAQK,KAAI,SAAAC,GAAE,OACb,6BACE,wBAAQC,KAAK,SAASC,KAAMF,EAAIG,QAASR,EAAkBC,UAAWC,IAAMO,KAA5E,SACGJ,KAFIA,QCAJ,SAASK,IAEtB,MAAgCC,mBAAS,GAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAsCF,mBAAS,GAA/C,mBAAOG,EAAP,KAAoBC,EAApB,KACA,EAA8BJ,mBAAS,GAAvC,mBAAOK,EAAP,KAAgBC,EAAhB,KA0BMC,EAAqB,WACzB,OAAON,EAAWE,EAAcE,GAQhC,OACE,qCACE,cAAC,EAAD,CAASpB,MAAM,wBAAf,SACE,cAACE,EAAD,CACEC,QAfM,CAAC,OAAQ,UAAW,OAgB1BC,gBArCU,SAAAmB,GAEnB,OAAQA,EAAMC,OAAOb,MACnB,IAAK,OACHM,GAAY,SAACQ,GAAD,OAAeA,EAAW,KACtC,MAEF,IAAK,UACHN,GAAe,SAACM,GAAD,OAAeA,EAAY,KAC1C,MAEF,IAAM,MACJJ,GAAW,SAACI,GAAD,OAAeA,EAAY,KACtC,MAEF,QACE,aAwBC,cAAC,EAAD,CAASzB,MAAM,aAAf,SACE,cAAC,EAAD,CACER,KAAMwB,EACNvB,QAASyB,EACTxB,IAAK0B,EACLzB,MAAO2B,IACP1B,mBAnB8B,WACtC,IAAM8B,EAAYJ,IAClB,OAAOK,KAAKC,MAAOZ,EAAWU,EAAa,KAiBfG,UC5DhC,IAYeC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.a4375b8d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"feedback_list__70ptW\"};","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction Statistics({ good, neutral, bad, total, positivePercentage }) {\n  return (\n    <>\n      {total > 0 ? (\n        <ul>\n          <li>\n            <p>\n              Good: <span>{good}</span>\n            </p>\n          </li>\n          <li>\n            <p>\n              Neutral: <span>{neutral}</span>\n            </p>\n          </li>\n          <li>\n            <p>\n              Bad: <span>{bad}</span>\n            </p>\n          </li>\n          <p>\n            Total: <span>{total}</span>\n          </p>\n          <p>\n            Positive Feedback: <span>{positivePercentage} %</span>\n          </p>\n        </ul>\n      ) : (\n        <p>No info</p>\n      )}\n    </>\n  );\n}\n\nStatistics.defaultProps = {\n  good: 0,\n  neutral: 0,\n  bad: 0,\n  total: 0,\n  positivePercentage: 0,\n};\nStatistics.propTypes = {\n  good: PropTypes.number,\n  neutral: PropTypes.number,\n  bad: PropTypes.number,\n  total: PropTypes.number,\n  positivePercentage: PropTypes.number,\n};\n\nexport default Statistics;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction Section(props) {\n    const { title, children } = props;\n    return (\n      <>\n        <h2>{title}</h2>\n        {children}\n      </>\n    );\n  }\n  \n  Section.propTypes = {\n    title: PropTypes.string.isRequired,\n    children: PropTypes.element.isRequired,\n  };\n  \n  export default Section;","import React from 'react';\nimport style from './feedback.module.css';\n\nexport default function FeedbackOptions({ options, onLeaveFeedback }) {\n  return (\n      <ul className={style.item}>\n        {options.map(el => (\n          <li key={el}>\n            <button type=\"button\" name={el} onClick={onLeaveFeedback}  className={style.list}>\n              {el}\n            </button>\n          </li>\n        ))}\n      </ul>\n  );\n}\n\n","import './App.css';\nimport  { useState } from 'react';\nimport Statistics from './components/Statistics/statistics';\nimport Section from './components/Container/container';\nimport FeedbackOptions from './components/Feedback/feedback';\n\n\nexport default function App() {\n\n  const [goodRate, setGoodRate] = useState(0);\n  const [neutralRate, setNeutralRate] = useState(0);\n  const [badRate, setBadRate] = useState(0);\n\n\n  const handleCount = event => {\n\n   switch (event.target.name) {\n     case 'good':\n       setGoodRate((prevState) => prevState +1 );\n       break;\n\n     case 'neutral':\n       setNeutralRate((prevState) => prevState + 1);\n       break;\n     \n     case  'bad':\n       setBadRate((prevState) => prevState + 1)\n       break;\n\n     default:\n       return;  \n   }\n\n  };\n\n  const options = ['good', 'neutral', 'bad'];\n\n  const countTotalFeedback = () => {\n    return goodRate + neutralRate + badRate;\n  };\n\n  const countPositiveFeedbackPercentage = () => {\n    const totalRate = countTotalFeedback();\n    return Math.round((goodRate / totalRate) * 100);\n  };\n\n    return (\n      <>\n        <Section title=\"Please leave feedback\">\n          <FeedbackOptions\n            options={options}\n            onLeaveFeedback={handleCount}\n          />\n        </Section>\n        <Section title=\"Statistics\">\n          <Statistics\n            good={goodRate}\n            neutral={neutralRate}\n            bad={badRate}\n            total={countTotalFeedback()}\n            positivePercentage={countPositiveFeedbackPercentage()}\n          />\n        </Section>\n      </>\n    );\n  }\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}